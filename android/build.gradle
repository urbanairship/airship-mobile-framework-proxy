buildscript {
    ext {
        // Android SDK versions
        compileSdkVersion = 33
        targetSdkVersion = 33
        minSdkVersion = 21
    }
}

plugins {
    alias(libs.plugins.benmanes.versions)
    alias(libs.plugins.nexus.publishing)
    alias(libs.plugins.spotless)

    alias(libs.plugins.kotlin.android).apply(false)
    alias(libs.plugins.android.library).apply(false)
}

task getVersion() {
    doLast {
        println libs.versions.airshipProxy.get()
    }
}

nexusPublishing {
    // user and pass are required for publishing.
    def user = System.getenv("SONATYPE_USERNAME") ?: findProperty("sonatype.username")
    def pass = System.getenv("SONATYPE_PASSWORD") ?: findProperty("sonatype.password")
    // profileId is optional, but supposedly speeds things up if set.
    def profileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: findProperty("sonatype.stagingProfileId")
    if (user != null && pass != null) {
        repositories {
            sonatype {
                username.set(user)
                password.set(pass)
                stagingProfileId.set(profileId)
            }
        }
        transitionCheckOptions {
            maxRetries.set(100)
            delayBetween.set(Duration.ofSeconds(60 * 2))
        }
        connectTimeout = Duration.ofSeconds(60 * 30)
        clientTimeout = Duration.ofSeconds(60 * 30)
    } else {
        logger.info("Missing publishing credentials! Nexus publishing will not be configured.")
    }
}


spotless {
    kotlin {
        target '**/*.kt'
        targetExclude '.idea/**', 'build/**', '*/build/**'
        ktlint(libs.versions.ktlint.get()).userData(["android": "true"])

        licenseHeaderFile "${rootDir}/gradle/spotless.license"
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    it.rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
